package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"strings"
)

var opcodeMap = map[string]string{
	"illegal":    "",
	"lui":        "LoadUpperImmediate",
	"auipc":      "AddUpperImmediatePC",
	"jal":        "JumpAndLink",
	"jalr":       "JumpAndLinkRegister",
	"beq":        "BrEqual",
	"bne":        "BrNotEqual",
	"blt":        "BrLessThan",
	"bge":        "BrGreaterEqual",
	"bltu":       "BrLessThanUnsigned",
	"bgeu":       "BrGreaterEqualUnsigned",
	"lb":         "Load8bit",
	"lh":         "Load16bit",
	"lw":         "Load32bit",
	"lbu":        "Load8bitUnsigned",
	"lhu":        "Load16bitUnsigned",
	"sb":         "Store8bit",
	"sh":         "Store16bit",
	"sw":         "Store32bit",
	"addi":       "ADDImmediate",
	"slti":       "SetLessThanImmediate",
	"sltiu":      "SetLessThanImmediateUnsigned",
	"xori":       "XORImmediate",
	"ori":        "ORImmediate",
	"andi":       "ANDImmediate",
	"slli":       "ShiftLeftLogicalImmediate",
	"srli":       "ShiftRightLogicalImmediate",
	"srai":       "ShiftRightArithmeticImmediate",
	"add":        "add\t",
	"sub":        "sub\t",
	"sll":        "ShiftLeftLogical",
	"slt":        "SetLessThan",
	"sltu":       "SetLesThanUnsigned",
	"xor":        "xor\t",
	"srl":        "ShiftRightLogical",
	"sra":        "ShiftRightArithmetic",
	"or":         "or\t",
	"and":        "and\t",
	"fence":      "fence\t",
	"fence.i":    "fence.i\t",
	"lwu":        "Load32bitUnsigned",
	"ld":         "Load64bit",
	"sd":         "Store64bit",
	"addiw":      "ADDImmediate32bit",
	"slliw":      "ShiftLeftLogicalImmediate32bit",
	"srliw":      "ShiftRightLogicalImmediate32bit",
	"sraiw":      "ShiftRihtArithmeticImmediate32bit",
	"addw":       "ADD32bit",
	"subw":       "SUB32bit",
	"sllw":       "ShiftLeftLogical32bit",
	"srlw":       "ShiftRightLogical32bit",
	"sraw":       "ShiftRightArithmetic32bit",
	"ldu":        "Load64bitUnsigned",
	"lq":         "Load128bit",
	"sq":         "Store128bit",
	"addid":      "ADDImmediate64bit",
	"sllid":      "ShiftLeftLogicalImmediate64bit",
	"srlid":      "ShiftRightLogicalImmediate64bit",
	"sraid":      "SiftRightArithmeticImmediate64bit",
	"addd":       "ADD64bit",
	"subd":       "SUB64bit",
	"slld":       "ShiftLeftLogical64bit",
	"srld":       "ShiftRightLogical64bit",
	"srad":       "ShiftRightArithmetic64bit",
	"mul":        "mul\t",
	"mulh":       "MUL16bit",
	"mulhsu":     "MUL16bitSinedUnsigned",
	"mulhu":      "MUL16bitUnsigned",
	"div":        "dif\t",
	"divu":       "DIVUnsigned",
	"rem":        "rem\t",
	"remu":       "REMUnsigned",
	"mulw":       "MUL32bit",
	"divw":       "DIV32bit",
	"divuw":      "DIVUnsigned32bit",
	"remw":       "REM32bit",
	"remuw":      "REMUnsigned32bit",
	"muld":       "MUL64bit",
	"divd":       "DIV64bit",
	"divud":      "DIVUnsigned64bit",
	"remd":       "REM64bit",
	"remud":      "REMUnsigned64bit",
	"lr.w":       "LoadReserved32bit",
	"sc.w":       "StoreConditional32bit",
	"amoswap.w":  "AtomicMemoryOperationSWAP32bit",
	"amoadd.w":   "AtomicMemoryOperationADD32bit",
	"amoxor.w":   "AtomicMemoryOperationXOR32bit",
	"amoor.w":    "AtomicMemoryOperationOR32bit",
	"amoand.w":   "AtomicMemoryOperationAND32bit",
	"amomin.w":   "AtomicMemoryOperationMIN32bit",
	"amomax.w":   "AtomicMemoryOperationMAX32bit",
	"amominu.w":  "AtomicMemoryOperationMINUnsigned32bit",
	"amomaxu.w":  "AtomicMemoryOperationMAXUnsigned32bit",
	"lr.d":       "LoadReserved64bit",
	"sc.d":       "StoreConditional64bit",
	"amoswap.d":  "AtomicMemoryOperationSWAP64bit",
	"amoadd.d":   "AtomicMemoryOperationADD64bit",
	"amoxor.d":   "AtomicMemoryOperationXOR64bit",
	"amoor.d":    "AtomicMemoryOperationOR64bit",
	"amoand.d":   "AtomicMemoryOperationAND64bit",
	"amomin.d":   "AtomicMemoryOperationMIN64bit",
	"amomax.d":   "AtomicMemoryOperationMAX64bit",
	"amominu.d":  "AtomicMemoryOperationMINUnsigned64bit",
	"amomaxu.d":  "AtomicMemoryOperationMAXUnsigned64bit",
	"lr.q":       "LoadReserved128bit",
	"sc.q":       "StoreConditional128bit",
	"amoswap.q":  "AtomicMemoryOperationSWAP128bit",
	"amoadd.q":   "AtomicMemoryOperationADD128bit",
	"amoxor.q":   "AtomicMemoryOperationXOR128bit",
	"amoor.q":    "AtomicMemoryOperationOR128bit",
	"amoand.q":   "AtomicMemoryOperationAND128bit",
	"amomin.q":   "AtomicMemoryOperationMIN128bit",
	"amomax.q":   "AtomicMemoryOperationMAX128bit",
	"amominu.q":  "AtomicMemoryOperationMINUnsigned128bit",
	"amomaxu.q":  "AtomicMemoryOperationMAXUnsigned128bit",
	"ecall":      "",
	"ebreak":     "",
	"uret":       "",
	"sret":       "",
	"hret":       "",
	"mret":       "",
	"dret":       "",
	"sfence.vm":  "",
	"sfence.vma": "",
	"wfi":        "",
	"csrrw":      "",
	"csrrs":      "",
	"csrrc":      "",
	"csrrwi":     "",
	"csrrsi":     "",
	"csrrci":     "",
	"flw":        "FloatLoadSingle",
	"fsw":        "FloatStoreSingle",
	"fmadd.s":    "FloatMulADD.Single",
	"fmsub.s":    "FloatMulSUB.Single",
	"fnmsub.s":   "FloatNegativeMulSUB.Single",
	"fnmadd.s":   "FloatNegativeMulADD.Single",
	"fadd.s":     "FloatADD.Single",
	"fsub.s":     "FloatSUB.Single",
	"fmul.s":     "FloatMUL.Single",
	"fdiv.s":     "FloatDIV.Single",
	"fsgnj.s":    "FloatSiGNinJection.Single",
	"fsgnjn.s":   "FloatSiGNinJectionNegative.Single",
	"fsgnjx.s":   "FloatSiGNinJectionXor.Single",
	"fmin.s":     "FloatMIN.Single",
	"fmax.s":     "FloatMAX.Single",
	"fsqrt.s":    "FloatSQRT.Single",
	"fle.s":      "FloatLessEqual.Single",
	"flt.s":      "FloatLessThan.Single",
	"feq.s":      "FloatEQual.Single",
	"fcvt.w.s":   "FloatConVerT.32bit.Single",
	"fcvt.wu.s":  "FloatConVerT.32bitUnsigned.Single",
	"fcvt.s.w":   "FloatConVerT.Single.32bit",
	"fcvt.s.wu":  "FloatConVerT.Single.32bitUnsigned",
	"fmv.x.s":    "FloatMV.toX.fromSingle",
	"fclass.s":   "FloatCLASSfiy.Single",
	"fmv.s.x":    "FloatMV.toSingle.fromX",
	"fcvt.l.s":   "FloatConVerT.64bit.Single",
	"fcvt.lu.s":  "FloatConVerT.64bitUnsigned.Single",
	"fcvt.s.l":   "FloatConVerT.Single.64bit",
	"fcvt.s.lu":  "FloatConVerT.Single.64bitUnsigned",
	"fld":        "FloatLoadDouble",
	"fsd":        "FloatStoreDouble",
	"fmadd.d":    "FloatMulADD.Double",
	"fmsub.d":    "FloatMulSUB.Double",
	"fnmsub.d":   "FloatNegativeMulSUB.Double",
	"fnmadd.d":   "FloatNegativeMulADD.Double",
	"fadd.d":     "FloatADD.Double",
	"fsub.d":     "FloatSUB.Double",
	"fmul.d":     "FloatMUL.Double",
	"fdiv.d":     "FloatDIV.Double",
	"fsgnj.d":    "FloatSiGNinJection.Double",
	"fsgnjn.d":   "FloatSiGNinJectionNegative.Double",
	"fsgnjx.d":   "FloatSiGNinJectionXor.Double",
	"fmin.d":     "FloatMIN.Double",
	"fmax.d":     "FloatMAX.Double",
	"fcvt.s.d":   "FloatConVerT.Single.Double",
	"fcvt.d.s":   "FloatConVerT.Double.Single",
	"fsqrt.d":    "FloatSQRT.Double",
	"fle.d":      "FloatLessEqual.Double",
	"flt.d":      "FloatLessThan.Double",
	"feq.d":      "FloatEQual.Double",
	"fcvt.w.d":   "FloatConVerT.32bit.Double",
	"fcvt.wu.d":  "FloatConVert.32bitUnsigned.Double",
	"fcvt.d.w":   "FloatConVert.Double.32bit",
	"fcvt.d.wu":  "FloatConVert.Double.32bitUnsigned",
	"fclass.d":   "FloatCLASSify.Double",
	"fcvt.l.d":   "FloatConVert.64bit.Double",
	"fcvt.lu.d":  "FloatConVert.64bitUnsigned.Double",
	"fmv.x.d":    "FloatMoVe.x.Double",
	"fcvt.d.l":   "FloatConVert.Double.64bit",
	"fcvt.d.lu":  "FloatConVert.Double.64bitUnsigned",
	"fmv.d.x":    "FloatMoVe.Double.x",
	"flq":        "FloatLoadQuad",
	"fsq":        "FloatStoreQuad",
	"fmadd.q":    "FloatMulADD.Quad",
	"fmsub.q":    "FloatMulSUB.Quad",
	"fnmsub.q":   "FloatNegativeMulSUB.Quad",
	"fnmadd.q":   "FloatNegativeMulADD.Quad",
	"fadd.q":     "FloatADD.Quad",
	"fsub.q":     "FloatSUB.Quad",
	"fmul.q":     "FloatMUL.Quad",
	"fdiv.q":     "FloatDIV.Quad",
	"fsgnj.q":    "FloatSiGNinJection.Quad",
	"fsgnjn.q":   "FloatSiGNinJectionNegative.Quad",
	"fsgnjx.q":   "FloatSiGNinJectionXor.Quad",
	"fmin.q":     "FloatMIN.Quad",
	"fmax.q":     "FloatMAX.Quad",
	"fcvt.s.q":   "FloatConVerT.Single.Quad",
	"fcvt.q.s":   "FloatConVerT.Quad.Single",
	"fcvt.d.q":   "FloatConVerT.Double.Quad",
	"fcvt.q.d":   "FloatConVerT.Quad.Double",
	"fsqrt.q":    "FloatSQRT.Quad",
	"fle.q":      "FloatLessEqual.Quad",
	"flt.q":      "FloatLessThan.Quad",
	"feq.q":      "FloatEQual.Quad",
	"fcvt.w.q":   "FloatConVerT.32bit.Quad",
	"fcvt.wu.q":  "FloatConVerT.32bitUnsigned.Quad",
	"fcvt.q.w":   "FloatConVerT.Quad.32bit",
	"fcvt.q.wu":  "FloatConVerT.Quad.32bitUnsigned",
	"fclass.q":   "FloatCLASSify.Quad",
	"fcvt.l.q":   "FloatConVerT.64bit.Quad",
	"fcvt.lu.q":  "FloatConVerT.64bitUnsigned.Quad",
	"fcvt.q.l":   "FloatConVerT.Quad.64bit",
	"fcvt.q.lu":  "FloatConVerT.Quad.64bitUnsigned",
	"fmv.x.q":    "FloatMoVe.x.Quad",
	"fmv.q.x":    "FloatMoVe.Quad.x",
	"c.addi4spn": "",
	"c.fld":      "",
	"c.lw":       "",
	"c.flw":      "",
	"c.fsd":      "",
	"c.sw":       "",
	"c.fsw":      "",
	"c.nop":      "",
	"c.addi":     "",
	"c.jal":      "",
	"c.li":       "",
	"c.addi16sp": "",
	"c.lui":      "",
	"c.srli":     "",
	"c.srai":     "",
	"c.andi":     "",
	"c.sub":      "",
	"c.xor":      "",
	"c.or":       "",
	"c.and":      "",
	"c.subw":     "",
	"c.addw":     "",
	"c.j":        "",
	"c.beqz":     "",
	"c.bnez":     "",
	"c.slli":     "",
	"c.fldsp":    "",
	"c.lwsp":     "",
	"c.flwsp":    "",
	"c.jr":       "",
	"c.mv":       "",
	"c.ebreak":   "",
	"c.jalr":     "",
	"c.add":      "",
	"c.fsdsp":    "",
	"c.swsp":     "",
	"c.fswsp":    "",
	"c.ld":       "",
	"c.sd":       "",
	"c.addiw":    "",
	"c.ldsp":     "",
	"c.sdsp":     "",
	"c.lq":       "",
	"c.sq":       "",
	"c.lqsp":     "",
	"c.sqsp":     "",
	"nop":        "",
	"mv":         "mv\t",
	"not":        "not\t",
	"neg":        "neg\t",
	"negw":       "NEG32bit",
	"sext.w":     "SignEXtend.32bit",
	"seqz":       "SetEqualZero",
	"snez":       "SetNotEqualZero",
	"sltz":       "SetLessThanZero",
	"sgtz":       "SetGreaterThanZero",
	"fmv.s":      "FloatMoVe.Single",
	"fabs.s":     "FloatABS.Single",
	"fneg.s":     "FloatNEGative.Single",
	"fmv.d":      "FloatMoVe.Double",
	"fabs.d":     "FloatABS.Double",
	"fneg.d":     "FloatNEGative.Double",
	"fmv.q":      "FloatMoVe.Quad",
	"fabs.q":     "FloatABS.Quad",
	"fneg.q":     "FloatNEGative.Quad",
	"beqz":       "BrEQualZero",
	"bnez":       "BrNotEqualZero",
	"blez":       "BrLessthanEqualZero",
	"bgez":       "BrGreaterEqualZero",
	"bltz":       "BrLessThanZero",
	"bgtz":       "BrGreaterThanZero",
	"ble":        "BrLessthanEqual",
	"bleu":       "BrLessthanEqualUnsigned",
	"bgt":        "BrGreaterThan",
	"bgtu":       "BrGreaterThanUnsigned",
	"j":          "Jump\t",
	"ret":        "",
	"jr":         "JumpRegister",
	"rdcycle":    "ReadCYCLE",
	"rdtime":     "ReadTIME",
	"rdinstret":  "ReadINSTRET",
	"rdcycleh":   "ReadCYCLEHigh",
	"rdtimeh":    "ReadTIMEHigh",
	"rdinstreth": "ReadINSTRETHigh",
	"frcsr":      "FloatReadCSR",
	"frrm":       "FloatReadRoundingMode",
	"frflags":    "FloatReadFLAGS",
	"fscsr":      "FloatStoreCSR",
	"fsrm":       "FloatStoreRoundingMode",
	"fsflags":    "FloatStoreFLAGS",
	"fsrmi":      "FloatStoreRoundingModeImmediate",
	"fsflagsi":   "FloatStoreFLAGSImmediate",
	"li":         "LoadImmediate",
}

func rewriteDisasm(file string, debug bool) {
	var instream io.Reader
	instream = os.Stdin
	if file != "-" {
		cmd := exec.Command("llvm-objdump", "-d", file)
		in, err := cmd.StdoutPipe()
		if err != nil {
			log.Fatal(err)
		}
		defer in.Close()
		if err := cmd.Start(); err != nil {
			log.Fatal(err)
		}
		instream = in
	}

	scanner := bufio.NewScanner(instream)
	scanner.Split(bufio.ScanLines)

	// Assume the lines have the following format
	// <address and hex dump>\t<opcode>\t<operand>...
	for scanner.Scan() {
		line := scanner.Text()
		if debug {
			fmt.Println(line)
		}
		groups := strings.Split(line, "\t")
		if len(groups) < 2 {
			fmt.Println(line)
			continue
		}
		t := opcodeMap[groups[1]]
		if len(t) > 0 {
			groups[1] = t
		}
		output := groups[0]
		for _, s := range groups[1:] {
			output += ("\t" + s)
		}
		fmt.Println(output)
	}
}

func main() {
	if len(os.Args) != 2 {
		log.Println("Usage:")
		log.Printf("\t%s objfile  (\"llvm-objdump -d objfile\" is called internally)\n", os.Args[0])
		log.Printf("\t%s - < objdump_output\n", os.Args[0])
		os.Exit(1)
	}
	debug := false
	rewriteDisasm(os.Args[1], debug)
}
